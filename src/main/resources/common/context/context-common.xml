<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

 	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="1000000000" />
        <property name="maxInMemorySize" value="1000000000" />
        <property name="resolveLazily" value="true"/>
    </bean>

    <!-- @Controller를 제외한 나머지를 bean에 등록 -->
    <context:component-scan base-package="common, skeletone">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

		
	<mvc:annotation-driven>
        <mvc:argument-resolvers>
            <bean class="common.resolver.CustomMapArgumentResolver"/>    
        </mvc:argument-resolvers>
    </mvc:annotation-driven>
    
    <bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonMessageConverter"/>
			</list>
		</property>
	</bean>
	
</beans>






<!-- 
https://okky.kr/article/289577
<mvc:annotation-driven> 에대한 설명

1. @ResponseBody 어노테이션이 있을 때 처리 형태 정의
-> messageConverters 관련 

2. @RequestParam 어노테이션이 있을 때 처리 형태 정의
-> ArgumentResolver 관련

3. String 타입의 파라메터가 들어왔을 때 처리 형태 정의
-> ArgumentResolver 관련

4. return type이 TestBean형태가 들어 왔을 때 처리 형태 정의
-> ReturnValueHandler 관련 

5. @RequestMapping("/abc") 어노테이션에 대한 처리 형태 정의 
-> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping 에서처리

가 있습니다.

이렇게 개별적으로 여러 타입이 있을 때 각각 방식을 정해 줍니다.

기본적으로  <mvc:annotation-driven> 에서 디폴트 방식을 정해 주지만 
내부에서 커스텀 어노테이션을 통해 확장도 가능합니다.
<mvc:annotation-driven>
__<mvc:argument-resolvers> 파라메터 타입 추가 가능
__<mvc:return-value-handlers> 리턴값 타입 추가 가능 
</mvc:annotation-driven> -->
